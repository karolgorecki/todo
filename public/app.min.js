"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Task = (function (_React$Component) {
    _inherits(Task, _React$Component);

    function Task(props) {
        _classCallCheck(this, Task);

        _get(Object.getPrototypeOf(Task.prototype), "constructor", this).call(this, props);
    }

    _createClass(Task, [{
        key: "markDone",
        value: function markDone() {
            this.props.done = !this.props.done;

            var data = {
                "name": this.props.children,
                "done": this.props.done
            };

            var parent = this.props.parent;

            $.ajax({
                type: "PUT",
                url: "http://localhost:8000/tasks/" + this.props.id,
                data: JSON.stringify(data),
                success: function success(d) {
                    parent.getTasks();
                },
                dataType: "JSON"
            });
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "span",
                null,
                React.createElement(
                    "small",
                    null,
                    "#",
                    this.props.id
                ),
                React.createElement("br", null),
                React.createElement(
                    "strong",
                    { className: "taskName", onClick: this.markDone.bind(this) },
                    this.props.children
                )
            );
        }
    }]);

    return Task;
})(React.Component);

var Tasks = (function (_React$Component2) {
    _inherits(Tasks, _React$Component2);

    function Tasks(props) {
        _classCallCheck(this, Tasks);

        _get(Object.getPrototypeOf(Tasks.prototype), "constructor", this).call(this, props);
    }

    _createClass(Tasks, [{
        key: "render",
        value: function render() {
            var _this = this;

            var taskNodes = this.props.data.map(function (tsk) {
                if (tsk.done && _this.props.hideDone) {
                    var cross = {
                        display: 'none'
                    };
                    return React.createElement(
                        "p",
                        { style: cross },
                        React.createElement(
                            Task,
                            { done: true, parent: _this.props.parent, id: tsk.id },
                            tsk.name
                        )
                    );
                } else if (tsk.done) {
                    var cross = {
                        textDecoration: 'line-through',
                        color: '#aaa'
                    };
                    return React.createElement(
                        "p",
                        { style: cross },
                        React.createElement(
                            Task,
                            { done: true, parent: _this.props.parent, id: tsk.id },
                            tsk.name
                        )
                    );
                } else {
                    return React.createElement(
                        "p",
                        null,
                        React.createElement(
                            Task,
                            { done: false, parent: _this.props.parent, id: tsk.id },
                            tsk.name
                        )
                    );
                }
            });

            return React.createElement(
                "div",
                null,
                "My tasks:",
                taskNodes
            );
        }
    }]);

    return Tasks;
})(React.Component);

var TaskApp = (function (_React$Component3) {
    _inherits(TaskApp, _React$Component3);

    function TaskApp(props) {
        _classCallCheck(this, TaskApp);

        _get(Object.getPrototypeOf(TaskApp.prototype), "constructor", this).call(this, props);
        this.state = { tasks: [], hideDone: false };
        this.getTasks();
    }

    _createClass(TaskApp, [{
        key: "getTasks",
        value: function getTasks() {
            var tasks = [];
            var self = this;
            $.get("http://localhost:8000/tasks", function (data) {
                for (var i = data.length - 1; i >= 0; i--) {
                    tasks.push(data[i]);
                };
                self.setState({ tasks: tasks });
            });
        }
    }, {
        key: "Callback",
        value: function Callback() {
            this.setState({ hideDone: !this.state.hideDone });
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                null,
                React.createElement(Tasks, { parent: this, data: this.state.tasks, hideDone: this.state.hideDone }),
                React.createElement(Filter, { onc: this.Callback, wat: this, hideDone: this.state.hideDone }),
                React.createElement(AddNew, { parent: this })
            );
        }
    }]);

    return TaskApp;
})(React.Component);

var Filter = (function (_React$Component4) {
    _inherits(Filter, _React$Component4);

    function Filter(props) {
        _classCallCheck(this, Filter);

        _get(Object.getPrototypeOf(Filter.prototype), "constructor", this).call(this, props);
    }

    _createClass(Filter, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { ref: "foo" },
                "Hide done tasks",
                React.createElement("input", { checked: this.props.hideDone,
                    value: this.props.hideDone,
                    ref: "hideDone",
                    onChange: this.props.onc.bind(this.props.wat),
                    type: "checkbox" })
            );
        }
    }]);

    return Filter;
})(React.Component);

var AddNew = (function (_React$Component5) {
    _inherits(AddNew, _React$Component5);

    function AddNew(props) {
        _classCallCheck(this, AddNew);

        _get(Object.getPrototypeOf(AddNew.prototype), "constructor", this).call(this, props);
    }

    _createClass(AddNew, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                null,
                " Add new task",
                React.createElement("input", { ref: "newtsk", type: "text" }),
                React.createElement(
                    "button",
                    { onClick: this.CreateNewTask.bind(this) },
                    "Add"
                )
            );
        }
    }, {
        key: "CreateNewTask",
        value: function CreateNewTask() {
            var inp = React.findDOMNode(this.refs.newtsk);

            if (inp.value.trim() == "") {
                alert("Can't create task with empty name");
                return;
            }

            var data = {};
            var parent = this.props.parent;

            data["name"] = inp.value;

            $.ajax({
                type: "POST",
                url: "http://localhost:8000/tasks",
                data: JSON.stringify(data),
                success: function success(d) {
                    parent.getTasks();
                },
                dataType: "JSON"
            });

            inp.value = "";
        }
    }]);

    return AddNew;
})(React.Component);

React.render(React.createElement(TaskApp, null), document.getElementById("content"));
